// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
//"fmt"
)

func addStatement(yylex yyLexer, stmt Statement) {
	yylex.(*lex).Query.Statements = append(yylex.(*lex).Query.Statements, stmt)
}

type yySymType struct {
	yys        int
	stmt       Statement
	stmts      Statements
	selectStmt *SelectStatement

	str     string
	query   Query
	field   *Field
	fields  Fields
	source  *Source
	sources Sources

	int     int
	int64   int64
	float64 float64
	bool    bool

	expr *ExprNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57381
	yyEofCode = 57344
	ADD       = 57376
	AND       = 57375
	AS        = 57349
	BY        = 57351
	COMMA     = 57372
	CREATE    = 57354
	DEC       = 57377
	DELETE    = 57358
	DIV       = 57379
	EQ        = 57360
	FLOAT     = 57370
	FROM      = 57347
	GROUP     = 57350
	GT        = 57364
	GTE       = 57365
	INSERT    = 57356
	INTEGER   = 57369
	INTO      = 57357
	LEFTC     = 57366
	LIMIT     = 57353
	LT        = 57362
	LTE       = 57363
	MOD       = 57380
	NAME      = 57368
	NEQ       = 57361
	OR        = 57374
	ORDER     = 57352
	RIGHTC    = 57367
	SELECT    = 57346
	SEMICOLON = 57373
	STAR      = 57359
	STRING    = 57371
	TIME      = 57378
	UPDATE    = 57355
	WHERE     = 57348
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -29
)

var (
	yyPrec = map[int]int{
		OR:   0,
		AND:  1,
		ADD:  2,
		DEC:  2,
		TIME: 3,
		DIV:  3,
		MOD:  3,
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (19x)
		57373: 1,  // SEMICOLON (16x)
		57368: 2,  // NAME (15x)
		57370: 3,  // FLOAT (11x)
		57369: 4,  // INTEGER (11x)
		57371: 5,  // STRING (11x)
		57375: 6,  // AND (10x)
		57374: 7,  // OR (10x)
		57367: 8,  // RIGHTC (9x)
		57372: 9,  // COMMA (5x)
		57383: 10, // CONDITION_VAR (5x)
		57360: 11, // EQ (5x)
		57347: 12, // FROM (5x)
		57364: 13, // GT (5x)
		57365: 14, // GTE (5x)
		57362: 15, // LT (5x)
		57363: 16, // LTE (5x)
		57361: 17, // NEQ (5x)
		57382: 18, // CONDITION (4x)
		57366: 19, // LEFTC (4x)
		57348: 20, // WHERE (4x)
		57384: 21, // FIELD (2x)
		57385: 22, // FIELDS (2x)
		57387: 23, // QUERIES (2x)
		57346: 24, // SELECT (2x)
		57388: 25, // SELECT_STATEMENT (2x)
		57389: 26, // SOURCE (2x)
		57390: 27, // SOURCES (2x)
		57359: 28, // STAR (2x)
		57391: 29, // STATEMENT (2x)
		57386: 30, // OPERATOR (1x)
		57392: 31, // WHERE_CONDITION (1x)
		57381: 32, // $default (0x)
		57376: 33, // ADD (0x)
		57349: 34, // AS (0x)
		57351: 35, // BY (0x)
		57354: 36, // CREATE (0x)
		57377: 37, // DEC (0x)
		57358: 38, // DELETE (0x)
		57379: 39, // DIV (0x)
		57345: 40, // error (0x)
		57350: 41, // GROUP (0x)
		57356: 42, // INSERT (0x)
		57357: 43, // INTO (0x)
		57353: 44, // LIMIT (0x)
		57380: 45, // MOD (0x)
		57352: 46, // ORDER (0x)
		57378: 47, // TIME (0x)
		57355: 48, // UPDATE (0x)
	}

	yySymNames = []string{
		"$end",
		"SEMICOLON",
		"NAME",
		"FLOAT",
		"INTEGER",
		"STRING",
		"AND",
		"OR",
		"RIGHTC",
		"COMMA",
		"CONDITION_VAR",
		"EQ",
		"FROM",
		"GT",
		"GTE",
		"LT",
		"LTE",
		"NEQ",
		"CONDITION",
		"LEFTC",
		"WHERE",
		"FIELD",
		"FIELDS",
		"QUERIES",
		"SELECT",
		"SELECT_STATEMENT",
		"SOURCE",
		"SOURCES",
		"STAR",
		"STATEMENT",
		"OPERATOR",
		"WHERE_CONDITION",
		"$default",
		"ADD",
		"AS",
		"BY",
		"CREATE",
		"DEC",
		"DELETE",
		"DIV",
		"error",
		"GROUP",
		"INSERT",
		"INTO",
		"LIMIT",
		"MOD",
		"ORDER",
		"TIME",
		"UPDATE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {23, 1},
		2:  {23, 2},
		3:  {23, 3},
		4:  {29, 1},
		5:  {25, 5},
		6:  {22, 1},
		7:  {22, 3},
		8:  {21, 1},
		9:  {21, 1},
		10: {27, 1},
		11: {27, 3},
		12: {26, 1},
		13: {31, 2},
		14: {31, 0},
		15: {18, 3},
		16: {18, 3},
		17: {18, 3},
		18: {18, 3},
		19: {30, 1},
		20: {30, 1},
		21: {30, 1},
		22: {30, 1},
		23: {30, 1},
		24: {30, 1},
		25: {10, 1},
		26: {10, 1},
		27: {10, 1},
		28: {10, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [42][]uint8{
		// 0
		{23: 30, 33, 32, 29: 31},
		{29},
		{28, 69},
		{25, 25},
		{2: 36, 21: 35, 34, 28: 37},
		// 5
		{12: 40},
		{9: 38, 12: 23},
		{9: 21, 12: 21},
		{9: 20, 12: 20},
		{2: 36, 21: 35, 39, 28: 37},
		// 10
		{12: 22},
		{2: 43, 26: 42, 41},
		{15, 15, 20: 47, 31: 46},
		{19, 19, 9: 44, 20: 19},
		{17, 17, 9: 17, 20: 17},
		// 15
		{2: 43, 26: 42, 45},
		{18, 18, 20: 18},
		{24, 24},
		{2: 51, 54, 53, 52, 10: 50, 18: 48, 49},
		{16, 16, 6: 65, 66},
		// 20
		{2: 51, 54, 53, 52, 10: 50, 18: 63, 49},
		{11: 56, 13: 60, 61, 58, 59, 57, 30: 55},
		{4, 4, 6: 4, 4, 4, 11: 4, 13: 4, 4, 4, 4, 4},
		{3, 3, 6: 3, 3, 3, 11: 3, 13: 3, 3, 3, 3, 3},
		{2, 2, 6: 2, 2, 2, 11: 2, 13: 2, 2, 2, 2, 2},
		// 25
		{1, 1, 6: 1, 1, 1, 11: 1, 13: 1, 1, 1, 1, 1},
		{2: 51, 54, 53, 52, 10: 62},
		{2: 10, 10, 10, 10},
		{2: 9, 9, 9, 9},
		{2: 8, 8, 8, 8},
		// 30
		{2: 7, 7, 7, 7},
		{2: 6, 6, 6, 6},
		{2: 5, 5, 5, 5},
		{13, 13, 6: 13, 13, 13},
		{6: 65, 66, 64},
		// 35
		{14, 14, 6: 14, 14, 14},
		{2: 51, 54, 53, 52, 10: 50, 18: 68, 49},
		{2: 51, 54, 53, 52, 10: 50, 18: 67, 49},
		{11, 11, 6: 65, 11, 11},
		{12, 12, 6: 12, 12, 12},
		// 40
		{27, 23: 70, 33, 32, 29: 31},
		{26},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 40

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			addStatement(yylex, yyS[yypt-0].stmt)
		}
	case 2:
		{
			addStatement(yylex, yyS[yypt-1].stmt)
		}
	case 3:
		{
			addStatement(yylex, yyS[yypt-2].stmt)
		}
	case 4:
		{
			yyVAL.stmt = yyS[yypt-0].selectStmt
		}
	case 5:
		{
			sele := &SelectStatement{
				Fields:         yyS[yypt-3].fields,
				Sources:        yyS[yypt-1].sources,
				WhereCondition: yyS[yypt-0].expr,
			}

			yyVAL.selectStmt = sele
		}
	case 6:
		{
			yyVAL.fields = []*Field{yyS[yypt-0].field}
		}
	case 7:
		{
			yyVAL.fields = append(yyS[yypt-0].fields, yyS[yypt-2].field)
		}
	case 8:
		{
			yyVAL.field = &Field{Name: yyS[yypt-0].str}
		}
	case 9:
		{
			yyVAL.field = &Field{Name: yyS[yypt-0].str}
		}
	case 10:
		{
			yyVAL.sources = []*Source{yyS[yypt-0].source}
		}
	case 11:
		{
			yyVAL.sources = append(yyS[yypt-0].sources, yyS[yypt-2].source)
		}
	case 12:
		{
			yyVAL.source = &Source{Name: yyS[yypt-0].str}
		}
	case 13:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 14:
		{
			yyVAL.expr = nil
		}
	case 15:
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 16:
		{
			yyVAL.expr = &ExprNode{Type: BinaryNode, Left: yyS[yypt-2].expr, Op: yyS[yypt-1].int, Right: yyS[yypt-0].expr}
		}
	case 17:
		{
			yyVAL.expr = &ExprNode{Type: BinaryNode, Left: yyS[yypt-2].expr, Op: yyS[yypt-1].int, Right: yyS[yypt-0].expr}
		}
	case 18:
		{
			yyVAL.expr = &ExprNode{Type: BinaryNode, Left: yyS[yypt-2].expr, Op: yyS[yypt-1].int, Right: yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 20:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 21:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 22:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 23:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 24:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 25:
		{
			yyVAL.expr = &ExprNode{Type: FieldNode, Name: yyS[yypt-0].str}
		}
	case 26:
		{
			yyVAL.expr = &ExprNode{Type: StringNode, StrVal: yyS[yypt-0].str}
		}
	case 27:
		{
			yyVAL.expr = &ExprNode{Type: IntegerNode, IntVal: yyS[yypt-0].int64}
		}
	case 28:
		{
			yyVAL.expr = &ExprNode{Type: FloatNode, FloVal: yyS[yypt-0].float64}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
